#!/usr/bin/python3
import sys, os
from model.scripts import matVis as matVis
import numpy as np

def wbVis(prefix, outdir = None):
    w0 = np.loadtxt(prefix + "l0.weights", delimiter=',')
    w1in = np.loadtxt(prefix + "l1in.weights", delimiter=',')
    w1out = np.loadtxt(prefix + "l1out.weights", delimiter=',')
    wf = np.loadtxt(prefix + "final.weights", delimiter=',')
    b0 = np.loadtxt(prefix + "l0.biases", delimiter=',')
    b1 = np.loadtxt(prefix + "l1.biases", delimiter=',')
    if outdir is not None:
        fullOut = outdir + "weights/"
        if not os.path.exists(outdir):
            os.mkdir(outdir)
            os.mkdir(fullOut)
        elif not os.path.exists(fullOut):
            os.mkdir(fullOut)
        matVis(w0, fullOut + "w0.png")
        matVis(w1in, fullOut + "w1in.png")
        matVis(w1out, fullOut + "w1out.png")
        matVis(np.expand_dims(wf, 1), fullOut + "final.png")
        matVis(np.expand_dims(b0, 1), fullOut + "b0.png")
        matVis(np.expand_dims(b1, 1) , fullOut + "b1.png")
    



if len(sys.argv) < 2:
    print("Usage: visualize.py <runId>\n\tstruct <dataId>\n\tmats <runId>")
    sys.exit()
if len(sys.argv) > 2:
    if sys.argv[1] == "struct":
        struct = np.loadtxt("dataStaging/" + sys.argv[2] + "/struct.csv", delimiter=',')
        matVis(struct, "dataStaging/" + sys.argv[2] + "/struct.png", connections=True)
        sys.exit()
    elif sys.argv[1] == "mats":
        wbVis("model/checkpoints/" + sys.argv[2] + "/", "visData/" + sys.argv[2] + "/")
        sys.exit()

runId = sys.argv[1]
if not os.path.exists("visData/" + runId):
    print("data not found")
    sys.exit()

visDir = "visData/" + runId + "/"

inData = np.loadtxt(visDir + "input", delimiter=',')
out0 = np.loadtxt(visDir + "out0", delimiter=',')
out1 = np.loadtxt(visDir + "out1", delimiter=',')
outf = np.expand_dims(np.loadtxt(visDir + "outf", delimiter=','), 0)
pred = np.expand_dims(np.loadtxt(visDir + "pred", delimiter=','), 0)

outf = outf.reshape((inData.shape[1], inData.shape[1]))
pred = pred.reshape((inData.shape[1], inData.shape[1]))

n = 10
matVis(inData, visDir + "input.png")
matVis(out0, visDir + "out0.png", connections=True, n=10)
matVis(out1, visDir + "out1.png", connections=True, n=10)
matVis(outf, visDir + "outf.png", connections=True)
matVis(pred, visDir + "pred.png", connections=True)
