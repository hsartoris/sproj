#!/usr/bin/python3
from smallNetworkGen import genSimplex, simulate, optimizeSpike
import sys
import numpy as np

def tenNeurNet():
    mat = np.matrix(np.zeros((10,10)))
    mat[1:3,0] = 1
    mat[2,1] = 1
    mat[5:8,4] = 1
    mat[6,5] = 1
    mat[7,5] = 1
    mat[7,6] = 1
    mat[8,2] = 1
    mat[9,8] = 1
    mat[6,9] = 1
    return mat

def complexMat(spikeLevel):
    # .15 is probably a good spike rate for this net
    mat = np.matrix(np.zeros((6,6)))
    # 2-simplex
    mat[1,0] = spikeLevel
    mat[2,0] = spikeLevel
    mat[2,1] = spikeLevel
    # 3-cycle
    #mat[7,6] = spikeLevel
    #mat[6,8] = spikeLevel
    #mat[8,7] = spikeLevel
    #single connection
    mat[5,4] = spikeLevel
    return mat

def level1mat():
    mat = np.matrix(np.zeros((3,3)))

if __name__=="__main__":
    if len(sys.argv) < 4:
        print("Usage: simpleDataGen.py outDir timesteps runs [spikeProb]\n\tNote: assumes dataStaging")
        sys.exit()
    
    outDir = "dataStaging/" + sys.argv[1] + "/"
    #neurons = int(sys.argv[2])
    neurons = 3
    steps = int(sys.argv[2])
    runs = int(sys.argv[3])
    
    spikeProb = (.05 if len(sys.argv) < 5 else float(sys.argv[4]))
    
    params = { 'runs':runs, 'timesteps':steps, 'spikeProb':spikeProb}
    
    # for 2-simplex, .25 is probably a good rate
    mat = genSimplex(neurons)
    #mat = tenNeurNet()
    #mat = complexMat(1)
    # finds optimal spike rate for data generation
    #spikeProb = optimizeSpike(mat, .05)
    #print("Optimized spike rate for this matrix:", spikeProb)
    simulate(mat, params, outDir)
    np.savetxt(outDir + "struct.csv", mat, delimiter=',')
